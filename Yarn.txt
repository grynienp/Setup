Getting started with Yarn

1. Install Chocolatey:

Run PowerShell as Admin
> Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

To update: > choco upgrade chocolatey

2. Install Yarn using chocolatey
> choco install Yarn
Within a new PS instance, check using > yarn -v

3. Yarn works with the same package.json, but has some nice extra features, including a faster
install time on average, guarantees for getting exactly the same dependency files on each
machine, and the ability to locally cache all packages downloaded!

4. Setting up an offline mirror
Take a minimal packages.json file and run > yarn init
on it. This will generate the yarn.lock file.

Time to set up the yarn config file:
> yarn config set yarn-offline-mirror "C:\A.Project0\PersonalTools\A. Setup\yarn-offline-mirror"
I'm setting it up so that all my projects's dependencies can be stored into a large, compressed
library that I can upload to GitHub along with my minimal project config files. This kind of
bundling guarantees that all of my projects start from a point that is known to work.

Offline mirror does not come with removing tarballs. In order to keep the cache folder up to date, you need to add the following to the config file:
> yarn config set yarn-offline-mirror-pruning true\
This is not desirable if you want to have a multi-project local repo. This is because not all
projects will use all of the packages from it. If you run > yarn remove on a package from one
project, it won't delete the file from the local folder. It will just remove the referene to it from
the current project. This means that removing the package from project A won't mess with project
B, which still uses it.

In a nutshell, to enable “Offline mirror” for your project you need:
A. Add “yarn-offline-mirror” configuration to .yarnrc file
B. Generate a new yarn.lock with “yarn install” command

To test that this works:
A. Clear your global cache with “yarn cache clean”
B. Turn off wifi
C. Run “yarn install –offline”. The offline flag will make sure yarn does not reach out to the network

Once verified that this works as expected, you can then zip the folder up periodically and
upload to GitHub to keep track of exactly the code we need. That way, if any breaking changes
are introduction in some of our dependencies, we can pull from our own sources. This allows
some to continue working while others investigate the dependency issue.
